diff --git a/dist/es/shared/node-entry.js b/dist/es/shared/node-entry.js
index e2d69227c5f2a2d9e5f3341f617476f3c0506131..6dc52dfa42d7ec3cf8918e4e746016b241b8478d 100644
--- a/dist/es/shared/node-entry.js
+++ b/dist/es/shared/node-entry.js
@@ -15844,6 +15844,7 @@ class Module {
         const source = this.magicString.clone();
         this.ast.render(source, options);
         source.trim();
+        options.pluginDriver.hookReduceValueSync('jkmx$postRenderModule', null, [source, this], () => {});
         const { usesTopLevelAwait } = this.astContext;
         if (usesTopLevelAwait && options.format !== 'es' && options.format !== 'system') {
             return error(logInvalidFormatForTopLevelAwait(this.id, options.format));
@@ -18815,8 +18816,9 @@ async function transformChunk(magicString, fileName, usedModules, chunkGraph, op
             resultingFile = resolve$1(dir, fileName);
         else
             resultingFile = resolve$1(fileName);
-        const decodedMap = magicString.generateDecodedMap({});
+        const decodedMap = magicString.generateDecodedMap({ hires: env$1.NODE_ENV === 'production' });
         map = collapseSourcemaps(resultingFile, decodedMap, usedModules, sourcemapChain, sourcemapExcludeSources, log);
+        await outputPluginDriver.hookSeq('jkmx$updateChunkMap', [map, resultingFile]);
         for (let sourcesIndex = 0; sourcesIndex < map.sources.length; ++sourcesIndex) {
             let sourcePath = map.sources[sourcesIndex];
             const sourcemapPath = `${resultingFile}.map`;
@@ -18973,7 +18975,7 @@ function emitSourceMapAndGetComment(fileName, map, pluginDriver, { sourcemap, so
             type: 'asset'
         });
     }
-    return sourcemap === 'hidden' ? '' : `//# ${SOURCEMAPPING_URL}=${url}\n`;
+    return sourcemap === 'hidden' ? '' : `//# ${SOURCEMAPPING_URL}=${url}`;
 }
 
 class Bundle {
@@ -18993,7 +18995,7 @@ class Bundle {
         this.pluginDriver.setOutputBundle(outputBundle, this.outputOptions);
         try {
             timeStart('initialize render', 2);
-            await this.pluginDriver.hookParallel('renderStart', [this.outputOptions, this.inputOptions]);
+            await this.pluginDriver.hookParallel('renderStart', [this.outputOptions, this.inputOptions, this]);
             timeEnd('initialize render', 2);
             timeStart('generate chunks', 2);
             const getHashPlaceholder = getHashPlaceholderGenerator();
@@ -19006,6 +19008,7 @@ class Bundle {
                 chunk.generateExports();
             }
             timeEnd('generate chunks', 2);
+            await this.pluginDriver.hookParallel('jkmx$postGenerate', [this, chunks]);
             await renderChunks(chunks, outputBundle, this.pluginDriver, this.outputOptions, this.inputOptions.onLog);
         }
         catch (error_) {
@@ -19944,9 +19947,10 @@ class ModuleLoader {
         if (resolveIdResult !== false && !this.options.external(id, importer, true)) {
             return null;
         }
+        const id_ = (x => x === true ? id : x)(this.options.external(id, importer, true));
         return {
-            external: isNotAbsoluteExternal(id, source, makeAbsoluteExternalsRelative) || 'absolute',
-            id
+            external: isNotAbsoluteExternal(id_, source, makeAbsoluteExternalsRelative) || 'absolute',
+            id: id_
         };
     }
     getResolveDynamicImportPromises(module) {
diff --git a/dist/shared/rollup.js b/dist/shared/rollup.js
index 2dfd6d5977aef596ac8f2be0f0ad6b7538b4bc22..63bb308abb2c60dab6d5dde8c3a1d59aad2092a8 100644
--- a/dist/shared/rollup.js
+++ b/dist/shared/rollup.js
@@ -22154,10 +22154,12 @@ function defineConfig(options) {
 
 exports.blue = blue;
 exports.bold = bold;
+exports.collapseSourcemap = collapseSourcemap;
 exports.commandAliases = commandAliases;
 exports.createFilter = createFilter;
 exports.cyan = cyan$1;
 exports.cyan$1 = cyan;
+exports.decodedSourcemap = decodedSourcemap;
 exports.defineConfig = defineConfig;
 exports.ensureArray = ensureArray$1;
 exports.getAugmentedNamespace = getAugmentedNamespace;
