diff --git a/node_modules/rollup/dist/es/shared/node-entry.js b/node_modules/rollup/dist/es/shared/node-entry.js
index d6e3d36..5132cd6 100644
--- a/node_modules/rollup/dist/es/shared/node-entry.js
+++ b/node_modules/rollup/dist/es/shared/node-entry.js
@@ -13064,6 +13064,7 @@ class Module {
         const source = this.magicString.clone();
         this.ast.render(source, options);
         source.trim();
+        options.pluginDriver.hookReduceValueSync('jkmx$postRenderModule', null, [source, this], () => {});
         const { usesTopLevelAwait } = this.astContext;
         if (usesTopLevelAwait && options.format !== 'es' && options.format !== 'system') {
             return error(logInvalidFormatForTopLevelAwait(this.id, options.format));
@@ -16811,8 +16812,9 @@ async function transformChunk(magicString, fileName, usedModules, chunkGraph, op
             resultingFile = resolve$1(dir, fileName);
         else
             resultingFile = resolve$1(fileName);
-        const decodedMap = magicString.generateDecodedMap({});
+        const decodedMap = magicString.generateDecodedMap({ hires: env$1.NODE_ENV === 'production' });
         map = collapseSourcemaps(resultingFile, decodedMap, usedModules, sourcemapChain, sourcemapExcludeSources, log);
+        await outputPluginDriver.hookSeq('jkmx$updateChunkMap', [map, resultingFile]);
         for (let sourcesIndex = 0; sourcesIndex < map.sources.length; ++sourcesIndex) {
             let sourcePath = map.sources[sourcesIndex];
             const sourcemapPath = `${resultingFile}.map`;
@@ -16962,7 +16964,7 @@ function emitSourceMapAndGetComment(fileName, map, pluginDriver, { sourcemap, so
             : sourcemapFileName;
         pluginDriver.emitFile({ fileName, source: map.toString(), type: 'asset' });
     }
-    return sourcemap === 'hidden' ? '' : `//# ${SOURCEMAPPING_URL}=${url}\n`;
+    return sourcemap === 'hidden' ? '' : `//# ${SOURCEMAPPING_URL}=${url}`;
 }
 
 class Bundle {
@@ -16982,7 +16984,7 @@ class Bundle {
         this.pluginDriver.setOutputBundle(outputBundle, this.outputOptions);
         try {
             timeStart('initialize render', 2);
-            await this.pluginDriver.hookParallel('renderStart', [this.outputOptions, this.inputOptions]);
+            await this.pluginDriver.hookParallel('renderStart', [this.outputOptions, this.inputOptions, this]);
             timeEnd('initialize render', 2);
             timeStart('generate chunks', 2);
             const getHashPlaceholder = getHashPlaceholderGenerator();
@@ -16995,6 +16997,7 @@ class Bundle {
                 chunk.generateExports();
             }
             timeEnd('generate chunks', 2);
+            await this.pluginDriver.hookParallel('jkmx$postGenerate', [this, chunks]);
             await renderChunks(chunks, outputBundle, this.pluginDriver, this.outputOptions, this.inputOptions.onLog);
         }
         catch (error_) {
@@ -17904,9 +17907,10 @@ class ModuleLoader {
         if (resolveIdResult !== false && !this.options.external(id, importer, true)) {
             return null;
         }
+        const id_ = (x => x === true ? id : x)(this.options.external(id, importer, true));
         return {
-            external: isNotAbsoluteExternal(id, source, makeAbsoluteExternalsRelative) || 'absolute',
-            id
+            external: isNotAbsoluteExternal(id_, source, makeAbsoluteExternalsRelative) || 'absolute',
+            id: id_
         };
     }
     getResolveDynamicImportPromises(module) {
diff --git a/node_modules/rollup/dist/shared/rollup.js b/node_modules/rollup/dist/shared/rollup.js
index cc82575..2beb394 100644
--- a/node_modules/rollup/dist/shared/rollup.js
+++ b/node_modules/rollup/dist/shared/rollup.js
@@ -20000,10 +20000,12 @@ function defineConfig(options) {
 
 exports.blue = blue;
 exports.bold = bold;
+exports.collapseSourcemap = collapseSourcemap;
 exports.commandAliases = commandAliases;
 exports.createFilter = createFilter;
 exports.cyan = cyan$1;
 exports.cyan$1 = cyan;
+exports.decodedSourcemap = decodedSourcemap;
 exports.defineConfig = defineConfig;
 exports.ensureArray = ensureArray$1;
 exports.getAugmentedNamespace = getAugmentedNamespace;
